# 製作一個感知器
# 2021/5/13

from matplotlib.colors import ListedColormap
import os
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

class Perceptron(object):
    """perceptron classifier
    parameters
    -------------
    eta:float
       learning rate(between 0.0 and 1.0)
    n_iter : int
       passes over the training dataset.
    random_state: int
       Random number generator seed for random weight
       initialization

    Attributes
    -------------
    w_: 1d-array
      Weight after fitting
    errors : list
      Number of miscalssifications in every epoch.
    """

    def __init__(self, eta=0.01, n_iter=50, random_state=1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state

    def fit(self, x, y):
        rgen = np.random.RandomState(self.random_state)
        self.w_ = rgen.normal(loc=0.0, scale=0.1, size=1 + x.shape[1])
        self.errors_ = []

        for _ in range(self.n_iter):
            errors = 0
            for xi, target in zip(x, y):
                update = self.eta*(target - self.predict(xi))
                self.w_[1:] += update*xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def net_input(self, x):
        return np.dot(x, self.w_[1:]) + self.w_[0]

    def predict(self, x):
        return np.where(self.net_input(x) >= 0.0, 1, -1)

v1= np.array([1,2,3])
v2= 0.5*v1
np.arccos(v1.dot(v2)/(np.linalg.norm(v1)*np.linalg.norm(v2)))

# 訓練一個鳶尾花數據集感知器模型

#s = os.path.join('https://archive.ics.uci.edu', 'ml', 'machine-learning-databases', 'iris', 'iris.data')
#print('URL:', s)
df = pd.read_csv('https://archive.ics.uci.edu/ml/''machine-learning-databases/iris/iris.data',
                 header=None, encoding='utf-8')
print(df.tail())

import matplotlib.pyplot as plt
import numpy as np
#select setosa and versaicolor
y = df.iloc[0:100, 4].values
y = np.where(y == 'Iris-setosa', -1, 1)
X = df.iloc[0:100, [0, 2]].values
plt.scatter(X[:50, 0], X[:50, 1], color='red', marker='o', label='setosa')
plt.scatter(X[50:100, 0], X[50:100, 1], color='blue',
            marker='x', label='versicolor')
plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upper left')
plt.show()

ppn = Perceptron(eta=0.1, n_iter=10)
ppn.fit(X, y)
plt.plot(range(1, len(ppn.errors_)+1), ppn.errors_, marker='o')
plt.xlabel('Epochs')
plt.ylabel('Numebr of updates')
plt.show()

from matplotlib.colors import ListedColormap
def plot_decision_regions(X, y, classifier, resolution=0.02):
	markers = ('s', 'x', 'o', '^', 'v')
	colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
	cmap = ListedColormap(colors[:len(np.unique(y))])
	# plot the decision surface
	x1_min, x1_max = X[:, 0].min() -1, X[:,0].max() +1
	x2_min , x2_max =X[:, 1].min() -1, X[:,1].max()+1
	xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution ))
	z= classifier.predict(np.array([xx1.ravel(),xx2.ravel()]).T)
	z=z.reshape(xx1.shape)
	plt.contourf(xx1, xx2, z, alpha=0.3, cmap=cmap)
	plt.xlim(xx1.min(), xx1.max())
	plt.ylim(xx2.min(), xx2.max())

	#plot class examples
	for idx, cl in enumerate(np.unique(y)):
		plt.scatter(x=X[y==cl,0], 
		y=X[y==cl,1], 
		alpha=0.8, 
		c=cmap[idx], 
		marker=markers[idx], 
		llabel=cl, 
		edgecolor='black')
plot_decision_regions(X,y,classifier=ppn) 
plt.xlabel('sepal length [cm]')
plt.ylabel('petal length [cm]')
plt.legend(loc='upper left')
plt.show()
